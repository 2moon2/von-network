#!/bin/bash
export MSYS_NO_PATHCONV=1
export DOCKERHOST=${APPLICATION_URL-$(docker run --net=host codenvy/che-ip)}
set -e

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"
export COMPOSE_PROJECT_NAME="von"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Usage: $0 [command] [options]

  Commands:

  build - Build the docker images for the project.
          You need to do this first.

  start - Creates the application containers from the built images
          and starts the services based on the docker-compose.yml file.

          Examples:
          $0 start
          $0 start <ip_proxy_1>,<ip_proxy_2>,<ip_proxy_3>,<ip_proxy_4> &

  cli - Start client container

  stop - Stops the services.  This is a non-destructive process.  The containers
         are not deleted so they will be reused the next time you run start.

  rebuild - Rebuild the docker images.

  rm - Remove project containers and associated volumes.
EOF
exit 1
}
# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose rm -svf >/dev/null

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern})

  # if [ ! -z "${_volumes}" ]; then
    # echo "Removing project volumes ..."
    # echo ${_volumes} |  xargs docker volume rm
  # else
    # echo "No project volumes exist."
  # fi
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null

case "$1" in
  start)
      if [ -z "$2" ]; then
        docker-compose up webserver node1 node2 node3 node4
      else
        if [[ $2 == *","* ]]; then
          # If arg contains comma, then it should be multiple IPS
          IPS=$2 docker-compose up webserver node1 node2 node3 node4
        else
          IP=$2 docker-compose up webserver node1 node2 node3 node4
        fi
      fi
    ;;
  cli)
      if [ -z "$2" ]; then
        docker-compose run client
      else
        docker-compose run -e IP="$2" client
      fi
    ;;
  stop)
      docker-compose stop
    ;;
  build)
      docker-compose build
    ;;
  rebuild)
      docker-compose build --no-cache
    ;;
  rm)
      # =========================================================
      # Suppress unnecessary messages
      # ---------------------------------------------------------
      export IP=0.0.0.0
      export IPS=0.0.0.0
      # =========================================================
      deleteVolumes
    ;;
  *)
      usage;;
esac

popd >/dev/null
